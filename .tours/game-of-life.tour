{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "5. game of life",
  "steps": [
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The program starts when the browser has completed loading the page. When that happens the function **main** is called.",
      "line": 149,
      "title": "start"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.html",
      "description": "The HTML page includes a **\\<canvas>** element where the visual representation of the game is rendered.",
      "line": 38,
      "selection": {
        "start": {
          "line": 36,
          "character": 1
        },
        "end": {
          "line": 39,
          "character": 1
        }
      },
      "title": "canvas element"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "Here, we set the **width** and **height** (in pixels) of the canvas to the desired values.",
      "line": 141,
      "selection": {
        "start": {
          "line": 140,
          "character": 1
        },
        "end": {
          "line": 142,
          "character": 1
        }
      },
      "title": "set canvas size"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The width and height of each cell is 10 pixels, i.e. two times the radius of the circle that can be drawn inside a cell. ",
      "line": 7,
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 8,
          "character": 1
        }
      },
      "title": "cell size"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **context** variable will hold a reference to a 2D context of the canvas that we need to draw on it.",
      "line": 142,
      "title": "get 2D context"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **createGame()** function creates the game \"engine\", taking the **context**, number of rows (**numRows**) and number of columns (**numColums**) as arguments and returns a function **start()** that, when called, starts the game.\n\n",
      "line": 144,
      "title": "create game"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "Here is the function declaration for the **createGame()** function. The parameters **context**, **numRows**, **numColumns** and the variable **grid** are referenced by inner functions of **createGame()** and, as such, are captured in a _closure_: they remain in existence even after the **createGame()** function has finished execution.",
      "selection": {
        "start": {
          "line": 19,
          "character": 1
        },
        "end": {
          "line": 21,
          "character": 1
        }
      },
      "title": "createGame function declaration",
      "line": 21
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **createGrid()** inner function is used to create the initial grid. It loops through each row and column to create the individual cells by calling the **createCell()** function, passing the **x** and **y** coordinates of the cell to be created.",
      "line": 28,
      "selection": {
        "start": {
          "line": 22,
          "character": 1
        },
        "end": {
          "line": 29,
          "character": 1
        }
      },
      "title": "createGrid function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **createCell()** function creates a JavaScript object that represents an individual cell. The object has **x** and **y** properties, representing the coordinates of the cell, and a boolean property **alive** that is randomly set to **true** or **false**. Thus, each cell is either alive or dead when first created.",
      "line": 17,
      "selection": {
        "start": {
          "line": 10,
          "character": 1
        },
        "end": {
          "line": 18,
          "character": 1
        }
      },
      "title": "createCell function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **draw()** function draws a cell onto the 2D canvas. First, it start by drawing a rectangular background.",
      "line": 37,
      "selection": {
        "start": {
          "line": 30,
          "character": 1
        },
        "end": {
          "line": 38,
          "character": 1
        }
      },
      "title": "draw cell background"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "If the cell is alive, it draws a circle inside the cell using a foreground color.",
      "line": 50,
      "selection": {
        "start": {
          "line": 39,
          "character": 1
        },
        "end": {
          "line": 51,
          "character": 1
        }
      },
      "title": "draw living cell"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "This helper (arrow) function takes an **x** and **y** coordinate and computes an index into the **grid** array that corresponds to the given coordinates. This is needed because the chosen one-dimensional form for the **grid** array turned out to be more convenient to handle than a two-dimensional form. An arrow function was chosen (as opposed to a traditional function declaration) because it can be concisely expressed as a single line.",
      "line": 53,
      "title": "gridToIndex arrow function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **isAlive()** function returns **true** or **false**, depending on whether a cell at the given **x** and **y** coordinates is alive or not. Note that the passed values of **x** and/or **y** may actually be off-grid. Off-grid cells are considered dead. Otherwise, we return the value of the boolean **alive** property of the cell at the given coordinates.",
      "line": 62,
      "selection": {
        "start": {
          "line": 55,
          "character": 1
        },
        "end": {
          "line": 63,
          "character": 1
        }
      },
      "title": "isAlive function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **countLivingNeighbors()** function counts the number of living cells that neighbor a given cell. For a cell at the edges of the grid the neighbors may include off-grid (dead) cells. The **isAlive()** function as discussed in the previous step caters for that.",
      "line": 77,
      "title": "countLivingNeighbors function",
      "selection": {
        "start": {
          "line": 65,
          "character": 1
        },
        "end": {
          "line": 78,
          "character": 1
        }
      }
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **updateGrid()** function loops through the **grid** array and computes for each cell its next state: alive or dead. It does so by obeying the rules of the Game Of Life:\n\nFrom Wikipedia's **Conway's Game of Life**:\n\n1. Any live cell with two or three live neighbours survives.\n2. Any dead cell with three live neighbours becomes a live cell.\n3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.",
      "line": 101,
      "selection": {
        "start": {
          "line": 79,
          "character": 1
        },
        "end": {
          "line": 102,
          "character": 1
        }
      },
      "title": "updateGrid function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **renderGrid()** function loops through the **grid** array and draws each cell (alive or dead) on the 2D canvas.",
      "line": 106,
      "selection": {
        "start": {
          "line": 103,
          "character": 1
        },
        "end": {
          "line": 107,
          "character": 1
        }
      },
      "title": "renderGrid function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **gameLoop()** function executes a cycle of **updateGrid()** and **renderGrid()** and then reschedules itself with a 200ms delay using **setTimeout**.",
      "line": 119,
      "selection": {
        "start": {
          "line": 108,
          "character": 1
        },
        "end": {
          "line": 120,
          "character": 1
        }
      },
      "title": "gameLoop function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "The **start()** function creates the initial grid, renders it and starts the game loop.",
      "line": 130,
      "selection": {
        "start": {
          "line": 121,
          "character": 1
        },
        "end": {
          "line": 131,
          "character": 1
        }
      },
      "title": "start function"
    },
    {
      "file": "2-Browsers/Week1/homework/ex6-gameOfLife/index.js",
      "description": "Upon return from the **createGame()** function, we call the **start()** function to start the game.\n\nThis concludes to Code Tour.",
      "line": 146,
      "selection": {
        "start": {
          "line": 139,
          "character": 1
        },
        "end": {
          "line": 147,
          "character": 1
        }
      },
      "title": "kick-start game"
    }
  ]
}